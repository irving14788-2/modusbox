<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="modusbox-suite.xml" />
	<munit:test name="modusboxFlow-test-success" doc:id="743dfae5-83ad-45cb-a473-9aa25113710a" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="b65e4a38-40b3-43a4-85e7-4112c11dd59b" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="5f8fd7a3-8975-4728-ab18-75bf555fdab7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://modusboxFlowtestsuccess\mock_payload.dwl')]" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://modusboxFlowtestsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://modusboxFlowtestsuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="vOutputOrder" value="#[output application/java --- readUrl('classpath://modusboxFlowtestsuccess\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderId" value="#[output application/java --- readUrl('classpath://modusboxFlowtestsuccess\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="f4aa6746-e896-454f-9a44-88a8e8014723" >
				<munit:payload value="#[readUrl('classpath://modusboxFlowtestsuccess\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://modusboxFlowtestsuccess\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://modusboxFlowtestsuccess\set-event_variable_.dwl')]" />
					<munit:variable key="orderId" value="#[output application/java --- readUrl('classpath://modusboxFlowtestsuccess\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to modusboxFlow" doc:id="637a0e76-536d-4412-84b8-13efc4fbc197" name="modusboxFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="68e43cf2-ee05-4dad-99a6-d14bddbb1577" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import modusboxFlowtestsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="modusboxFlow-nodata-test" doc:id="975a5b91-14e3-4182-b613-f1928589e44f" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="304a6cc3-f79a-4f69-b846-8165816556b4" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="5f8fd7a3-8975-4728-ab18-75bf555fdab7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://modusboxFlownodatatest\mock_payload.dwl')]" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://modusboxFlownodatatest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://modusboxFlownodatatest\mock_variable_.dwl')]" />
						<munit-tools:variable key="vOutputOrder" value="#[output application/java --- readUrl('classpath://modusboxFlownodatatest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderId" value="#[output application/java --- readUrl('classpath://modusboxFlownodatatest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="3edde28c-397e-43f4-bc33-2414945bf100" >
				<munit:payload value="#[readUrl('classpath://modusboxFlownodatatest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://modusboxFlownodatatest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://modusboxFlownodatatest\set-event_variable_.dwl')]" />
					<munit:variable key="orderId" value="#[output application/java --- readUrl('classpath://modusboxFlownodatatest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to modusboxFlow" doc:id="18ab3302-2a4c-4bc6-98db-80e1f68a69e4" name="modusboxFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ddff3f3d-f37c-4ec0-b3ae-31841fc90b5d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import modusboxFlownodatatest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
